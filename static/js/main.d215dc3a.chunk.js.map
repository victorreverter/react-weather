{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","value","cityvalue","countryvalue","Weather","city","country","temperature","Math","round","humidity","description","error","errorinput","API_KEY","App","state","undefined","event","a","preventDefault","target","elements","fetch","api_call","json","data","console","log","cod","setState","main","temp","sys","weather","timezoneValue","timezone","date","Date","hours","getHours","weatherCond","document","querySelector","classList","add","removeAttribute","wrapper","remove","id","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d215dc3a.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst Titles = () => (\r\n    <div>\r\n        <h1 className=\"title-container__title\">Weather Finder</h1>\r\n        <p className=\"title-container__subtitle\">Find out temperature, conditions and more...</p>\r\n    </div>\r\n)\r\n\r\n// class Titles extends React.Component {\r\n//     render() {\r\n//         return(\r\n//             <div>\r\n//                 <h1>Weather Finder</h1>\r\n//                 <p>Find out temperature, conditions and more...</p>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\nexport default Titles","import React from \"react\"\r\n\r\nconst Form = props => {\r\n    // console.log(props);\r\n    // setTimeout(() => {\r\n    //     console.log(props);\r\n    // }, 2500);    \r\n    return (\r\n        <form onSubmit={props.getWeather}>\r\n            <input type=\"text\" name=\"city\" placeholder=\"City...\" value={props.cityvalue}/>\r\n            <input type=\"text\" name=\"country\" placeholder=\"Country...\" value={props.countryvalue}/>\r\n            <button>Get Weather</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n// class Form extends React.Component {\r\n//     render() {\r\n//         return (\r\n//             <form onSubmit={this.props.getWeather}>\r\n//                 <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n//                 <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n//                 <button>Get Weather</button>\r\n//             </form>\r\n//         )\r\n//     }\r\n// }\r\n\r\nexport default Form","import React from \"react\"\r\n\r\nconst Weather = props => (\r\n    < div className = \"weather__info\" >\r\n        {props.city && props.country && <p className=\"weather__key\">Location: <span className=\"weather__value\">{props.city}, {props.country}</span></p>}\r\n        {props.temperature && <p className=\"weather__key\">Temperature: <span className=\"weather__value\">{Math.round(props.temperature) + 'ÂºC'}</span></p>}\r\n        {props.humidity && <p className=\"weather__key\">Humidity: <span className=\"weather__value\">{props.humidity + '%'}</span></p>}\r\n        {props.description && <p className=\"weather__key\">Conditions: <span className=\"weather__value\">{props.description}</span></p>}\r\n        {props.error && <p className=\"weather__error\">{props.error}</p>}\r\n        {props.errorinput && <p className=\"weather__error\">{props.errorinput}</p>}\r\n    </div>\r\n)\r\n\r\n// class Weather extends React.Component {\r\n//     render() {\r\n//         return (\r\n//             <div>\r\n//                 {this.props.city && this.props.country && <p>Location: {this.props.city}, {this.props.country}</p>}\r\n//                 {this.props.temperature && <p>Temperature: {this.props.temperature}</p>}\r\n//                 { this.props.humidity && <p>Humidity: {this.props.humidity}</p>}\r\n//                 { this.props.description && <p>Conditions: {this.props.description}</p>}\r\n//                 {this.props.error && <p>{this.props.error}</p>}\r\n//                 {/* <p>Location: {this.props.city}, {this.props.country}</p>\r\n//                 <p>Temperature: {this.props.temperature}</p>\r\n//                 <p>Humidity: {this.props.humidity}</p>\r\n//                 <p>Conditions: {this.props.description}</p> */}\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\nexport default Weather","import React from \"react\";\n\nimport Titles from './components/Titles'\nimport Form from './components/Form'\nimport Weather from './components/Weather'\n\nconst API_KEY = \"b30469c34aa10dbe70aefc3e77b30113\"\n// const API_KEY_ALT = \"53a6ca3062506611b8f80156ca16297e\"\n\nclass App extends React.Component {\n\n  state = {\n    cityvalue: undefined,\n    countryvalue: undefined,\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n    errorinput: undefined,\n  }\n\n  componentDidMount() {\n    const date = new Date();\n    const hours = date.getHours();\n\n    if(hours >= 20 || hours <= 5) {\n      const wrapper = document.querySelector('.wrapper');\n\n      wrapper.classList.remove('day');\n      wrapper.classList.add('night');\n      \n      // wrapper.style.backgroundImage = \"url(/static/media/night.17bd3fcb.jpg)\";\n      // wrapper.style.backgroundSize = \"cover\";\n      // wrapper.style.backgroundPosition = \"center\";\n      // wrapper.style.backgroundRepeat = \"repeat\";\n\n    } \n    // else {\n    //   const wrapper = document.querySelector('.wrapper');\n\n    //   // wrapper.style.backgroundImage = \"url(/static/media/day.7dfd2f3f.jpg)\";\n    //   // wrapper.style.backgroundSize = \"cover\";\n    //   // wrapper.style.backgroundPosition = \"center\";\n    //   // wrapper.style.backgroundRepeat = \"repeat\";\n    // }    \n  }\n\n  getWeather = async (event) => {\n    event.preventDefault();\n\n    const city = event.target.elements.city.value;\n    const country = event.target.elements.country.value;\n\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    \n    if(city && country) {\n\n      console.log(data);      \n\n      // Detect if the City and Country is well written\n\n      if(data.cod === \"404\") {\n        this.setState({\n          temperature: undefined,\n          city: undefined,\n          country: undefined,\n          humidity: undefined,\n          description: undefined,\n          error: undefined,\n          errorinput: \"Please enter a correct City & Country\"\n        })\n      }else {\n        this.setState({          \n          temperature: data.main.temp,\n          city: data.name,\n          country: data.sys.country,\n          humidity: data.main.humidity,\n          description: data.weather[0].description,\n          error: \"\",\n          errorinput: \"\"\n        })\n\n        const timezoneValue = data.timezone;\n        \n        console.log(timezoneValue);\n        \n\n        // setTimeout(() => {\n        //   console.log('has been triggered clean');\n        //   this.setState({\n        //     cityvalue: undefined,\n        //     countryvalue: undefined,\n        //   })\n        // }, 2000);\n      }\n\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter a value or fill both fields\",\n        errorinput: \"\"\n      })\n    }\n\n    console.log(data.weather[0].main);\n\n    const date = new Date();\n    const hours = date.getHours();\n\n    const weatherCond = document.querySelector('#title-container');\n    \n    if (hours >= 20 || hours <= 5) {\n\n      if (data.weather[0].main === 'Thunderstorm') {\n        \n        weatherCond.classList.add('thurderstorm-n');\n\n      } else if (data.weather[0].main === 'Drizzle') {\n\n        weatherCond.classList.add('drizzle-n');\n\n      } else if (data.weather[0].main === 'Rain') {\n\n        weatherCond.classList.add('rain-n');\n\n      } else if (data.weather[0].main === 'Snow') {\n\n        weatherCond.classList.add('snow-n');\n\n      } else if (data.weather[0].main === 'Mist' || data.weather[0].main === 'Fog' || data.weather[0].main === 'Smoke') {\n\n        weatherCond.classList.add('mist-n');\n\n      } else if (data.weather[0].main === 'Snow') {\n\n        weatherCond.classList.add('snow-n');\n\n      } else if (data.weather[0].main === 'Clear') {\n\n        weatherCond.classList.add('clear-n');\n\n      } else if (data.weather[0].main === 'Clouds') {\n\n        weatherCond.classList.add('clouds-n');\n\n      }\n      \n    } else {      \n      \n      if (data.weather[0].main === 'Thunderstorm') {\n        \n        weatherCond.classList.add('thurderstorm-d');\n\n      } else if (data.weather[0].main === 'Drizzle') {\n\n        weatherCond.classList.add('drizzle-d');\n\n      } else if (data.weather[0].main === 'Rain') {\n\n        weatherCond.classList.add('rain-d');\n\n      } else if (data.weather[0].main === 'Snow') {\n\n        weatherCond.classList.add('snow-d');\n        \n      } else if (data.weather[0].main === 'Mist' || data.weather[0].main === 'Fog' || data.weather[0].main === 'Smoke') {\n\n        weatherCond.classList.add('mist-d');\n        \n      } else if (data.weather[0].main === 'Snow') {\n\n        weatherCond.classList.add('snow-d');\n        \n      } else if (data.weather[0].main === 'Clear') {\n\n        weatherCond.removeAttribute('class');\n        weatherCond.classList.add('clear-d');\n\n      } else if (data.weather[0].main === 'Clouds') {\n\n        weatherCond.removeAttribute('class');\n        weatherCond.classList.add('clouds-d');\n\n      }\n      \n      // weatherCond.classList.remove('day');\n      // weatherCond.classList.add('night');\n\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper day\">\n          <div className=\"main\">\n            <div id=\"title-container\" className=\"standard-bg\">\n              <Titles/>\n            </div>\n            <div className=\"form-container\">\n              <Form getWeather={this.getWeather}/>\n              {/* <Form getWeather={this.getWeather} cityvalue={this.state.cityvalue} countryvalue={this.state.countryvalue} /> */}\n              <Weather \n                temperature={this.state.temperature}\n                city={this.state.city}\n                country={this.state.country}\n                humidity={this.state.humidity}\n                description={this.state.description}\n                error={this.state.error}\n                errorinput={this.state.errorinput}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n\n\n        \n        ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}